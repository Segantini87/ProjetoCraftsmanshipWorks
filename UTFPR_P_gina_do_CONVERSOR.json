{
  "name": "UTFPR Página do CONVERSOR",
  "nodes": [
    {
      "parameters": {
        "path": "utfpr",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -440,
        -120
      ],
      "id": "ef1451a2-ffba-4a52-ba25-5cffe87b199f",
      "name": "Webhook",
      "webhookId": "5a56986a-9cec-4435-a1af-77e7f3e4a77b"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.html }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        80,
        -160
      ],
      "id": "ef074861-53b7-42a2-88f2-14c35c4aa247",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "html": "<!DOCTYPE html>\n<html lang=\"pt-BR\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Processador de PDFs - UTFPR</title>\n    <style>\n        :root {\n            --utfpr-yellow: #FFCC29;\n            --utfpr-black: #222;\n            --utfpr-white: #fff;\n            --utfpr-grey: #f4f4f4;\n        }\n        * { margin: 0; padding: 0; box-sizing: border-box; }\n        body {\n            font-family: 'Segoe UI', Arial, Helvetica, sans-serif;\n            background: var(--utfpr-grey);\n            min-height: 100vh;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 20px;\n        }\n        .container {\n            max-width: 850px;\n            width: 100%;\n            background: var(--utfpr-white);\n            border-radius: 18px;\n            padding: 40px 28px 32px 28px;\n            box-shadow: 0 16px 40px rgba(34,34,34,0.13);\n            text-align: center;\n            border: 2px solid var(--utfpr-yellow);\n        }\n        h1 {\n            color: var(--utfpr-black);\n            margin-bottom: 8px;\n            font-size: 2.3em;\n            font-weight: bold;\n            letter-spacing: 1.2px;\n        }\n        .subtitle {\n            color: #555;\n            margin-bottom: 30px;\n            font-size: 1.08em;\n        }\n        .upload-area {\n            border: 2.5px dashed var(--utfpr-black);\n            border-radius: 12px;\n            padding: 60px 16px;\n            background: linear-gradient(145deg, #fff, #fffbe8 90%);\n            transition: all 0.3s ease;\n            cursor: pointer;\n            margin-bottom: 30px;\n            position: relative;\n        }\n        .upload-area.dragover {\n            border-color: var(--utfpr-yellow) !important;\n            background: linear-gradient(145deg, #fffde2, #fffad1) !important;\n        }\n        .upload-icon {\n            font-size: 3em;\n            margin-bottom: 12px;\n            color: var(--utfpr-yellow);\n        }\n        .upload-text {\n            font-size: 1.15em;\n            color: var(--utfpr-black);\n            margin-bottom: 7px;\n            font-weight: 600;\n        }\n        .upload-subtext {\n            color: #333;\n            font-size: 0.98em;\n        }\n        #fileInput { position: absolute; left: -9999px; opacity: 0; }\n        .file-list { margin-bottom: 20px; display: none; }\n        .file-item {\n            display: flex; align-items: center; justify-content: space-between;\n            background: #fffde7;\n            padding: 13px 20px; margin-bottom: 9px;\n            border-radius: 9px;\n            border-left: 4px solid var(--utfpr-yellow);\n        }\n        .file-info { display: flex; align-items: center; flex: 1; }\n        .file-icon { color: var(--utfpr-black); font-size: 1.5em; margin-right: 14px; }\n        .file-details h4 { color: var(--utfpr-black); font-size: 1em; margin-bottom: 2px; font-weight: 600;}\n        .file-size { color: #888; font-size: 0.93em; }\n        .remove-btn {\n            background: var(--utfpr-black); color: var(--utfpr-yellow);\n            border: none; padding: 7px 12px; border-radius: 6px;\n            cursor: pointer; font-size: 0.92em; font-weight: 500;\n        }\n        .remove-btn:hover { background: var(--utfpr-yellow); color: var(--utfpr-black);}\n        .process-btn {\n            background: var(--utfpr-yellow); color: var(--utfpr-black);\n            border: none; padding: 16px 40px; font-size: 1.18em;\n            border-radius: 10px; cursor: pointer; width: 100%; margin-bottom: 18px;\n            font-weight: bold; text-transform: uppercase; letter-spacing: 1px;\n            box-shadow: 0 2px 12px rgba(34,34,34,0.08);\n        }\n        .process-btn:hover:not(:disabled) {\n            background: var(--utfpr-black); color: var(--utfpr-yellow);\n        }\n        .process-btn:disabled {\n            background: #f1f1f1; color: #aaa;\n            cursor: not-allowed; box-shadow: none;\n        }\n        .progress-section { display: none; background: #fffde2; padding: 30px; border-radius: 13px; margin-bottom: 16px; }\n        .progress-bar {\n            width: 100%; height: 12px; background: #efefef; border-radius: 7px;\n            overflow: hidden; margin: 19px 0 10px 0;\n        }\n        .progress-fill {\n            height: 100%;\n            background: linear-gradient(90deg, var(--utfpr-yellow), #fffde2 80%);\n            width: 0%; transition: width 0.5s ease;\n            position: relative;\n        }\n        .progress-text { color: var(--utfpr-black); font-size: 1.07em; font-weight: 500;}\n        .status-indicator { display: inline-flex; align-items: center; margin-top: 15px; padding: 10px 15px;\n            background: #fff6c9; border-radius: 8px; font-size: 0.93em; color: var(--utfpr-black);}\n        .status-dot { width: 8px; height: 8px; background: var(--utfpr-yellow); border-radius: 50%; margin-right: 8px; animation: pulse 2s infinite;}\n        @keyframes pulse {0%{opacity:1;}50%{opacity:.4;}100%{opacity:1;}}\n        .results-section { display: none; text-align: left;}\n        .results-title { color: var(--utfpr-black); margin-bottom: 20px; font-size: 1.3em; text-align: center; font-weight: 700;}\n        .results-stats {\n            display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));\n            gap: 13px; margin-bottom: 18px;\n        }\n        .stat-card {\n            background: #fffbe8; padding: 16px; border-radius: 11px;\n            text-align: center; box-shadow: 0 2px 10px rgba(34,34,34,0.06);\n        }\n        .stat-number { font-size: 1.55em; font-weight: 700; color: var(--utfpr-yellow); margin-bottom: 5px;}\n        .stat-label { color: #222; font-size: 0.9em; text-transform: uppercase; letter-spacing: 0.3px;}\n        .results-table {\n            width: 100%; border-collapse: collapse; background: white;\n            border-radius: 12px; overflow: hidden;\n            box-shadow: 0 2px 13px rgba(34,34,34,0.09); margin-bottom: 17px;\n        }\n        .results-table th {\n            background: var(--utfpr-black); color: var(--utfpr-yellow);\n            padding: 14px 11px; text-align: left; font-weight: 600; font-size: 0.95em; text-transform: uppercase;\n        }\n        .results-table td {\n            padding: 13px 11px; border-bottom: 1px solid #eee; font-size: 0.97em; color: #212121;\n        }\n        .results-table tr:last-child td { border-bottom: none; }\n        .results-table tr:nth-child(even) { background: #fffde7; }\n        .results-table tr:hover { background: #fffcc7; }\n        .error-section {\n            display: none; background: #ffe9e9; border: 2px solid #ffb4b4; color: #b00;\n            padding: 18px; border-radius: 12px; margin-top: 15px;\n        }\n        .success-message {\n            background: #e5ffdf; border: 2px solid #97c16e; color: #184202;\n            padding: 16px; border-radius: 10px; margin-bottom: 22px; text-align: center; font-weight: 500; font-size: 1.07em;\n        }\n        .action-buttons { display: flex; gap: 15px; justify-content: center; margin-top: 22px;}\n        .new-upload-btn, .download-btn {\n            background: var(--utfpr-black); color: var(--utfpr-yellow); border: none; padding: 10px 22px; border-radius: 7px;\n            cursor: pointer; font-weight: 500; font-size: 1em; text-decoration: none;\n        }\n        .download-btn { background: var(--utfpr-yellow); color: var(--utfpr-black);}\n        .new-upload-btn:hover, .download-btn:hover { filter: brightness(1.12);}\n        .notification {\n            position: fixed; top: 20px; right: 20px; padding: 14px 22px; border-radius: 8px; color: white;\n            font-weight: 500; z-index: 1000; transform: translateX(400px); transition: transform 0.3s ease;\n        }\n        .notification.show { transform: translateX(0); }\n        .notification.success { background: linear-gradient(135deg, #56cc42, #28a745);}\n        .notification.error { background: linear-gradient(135deg, #dc3545, #a00418);}\n        .notification.info { background: linear-gradient(135deg, #1c1c1c, #888);}\n        .raw-data {\n            background: #f9f9f9; border: 1px solid #eee; border-radius: 8px; padding: 13px; margin: 17px 0; font-family: 'Courier New', monospace; font-size: 0.96em;\n            max-height: 220px; overflow-y: auto; white-space: pre-wrap; word-break: break-all;\n        }\n        .debug-section {\n            background: #f0f8ff; border: 1px solid #ddd; border-radius: 8px; padding: 15px; margin: 15px 0;\n            font-family: 'Courier New', monospace; font-size: 0.9em;\n        }\n        @media (max-width: 800px) { .container {padding: 18px;} }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Processador de PDFs - UTFPR</h1>\n        <p class=\"subtitle\">Powered by AI - Extração Inteligente de Dados</p>\n        <div class=\"upload-section\" id=\"uploadSection\">\n            <div class=\"upload-area\" id=\"uploadArea\">\n                <div class=\"upload-icon\">📁</div>\n                <div class=\"upload-text\">Clique ou arraste seus PDFs aqui</div>\n                <div class=\"upload-subtext\">A IA irá extrair dados automaticamente</div>\n            </div>\n            <input type=\"file\" id=\"fileInput\" multiple accept=\".pdf\">\n            <div class=\"file-list\" id=\"fileList\"><div id=\"fileItems\"></div></div>\n            <button class=\"process-btn\" id=\"processBtn\" onclick=\"processFiles()\" disabled>🚀 Processar com IA</button>\n        </div>\n        <div class=\"progress-section\" id=\"progressSection\">\n            <div class=\"progress-text\" id=\"progressText\">Preparando processamento...</div>\n            <div class=\"progress-bar\">\n                <div class=\"progress-fill\" id=\"progressFill\"></div>\n            </div>\n            <div class=\"status-indicator\">\n                <div class=\"status-dot\"></div>\n                <span id=\"statusText\">Aguardando resposta da IA...</span>\n            </div>\n        </div>\n        <div class=\"results-section\" id=\"resultsSection\">\n            <div class=\"success-message\">✅ Processamento concluído com sucesso pela IA!</div>\n            <div class=\"results-stats\" id=\"resultsStats\"></div>\n            <h3 class=\"results-title\">Dados Extraídos pela IA</h3>\n            <div id=\"resultsContainer\"></div>\n            <div class=\"action-buttons\">\n                <button class=\"download-btn\" onclick=\"downloadResults()\">📊 Download CSV</button>\n                <button class=\"new-upload-btn\" onclick=\"resetInterface()\">📄 Processar Novos PDFs</button>\n            </div>\n        </div>\n        <div class=\"error-section\" id=\"errorSection\">\n            <strong>⚠️ Erro no processamento:</strong>\n            <div id=\"errorMessage\"></div>\n            <div class=\"action-buttons\">\n                <button class=\"new-upload-btn\" onclick=\"resetInterface()\">🔄 Tentar Novamente</button>\n            </div>\n        </div>\n    </div>\n<script>\nlet selectedFiles = [];\nlet extractedData = [];\nconst WEBHOOK_URL = 'https://n8nwebhook.stratifymind.com.br/webhook/conversor';\n\ndocument.addEventListener('DOMContentLoaded', function() { initializeEventListeners(); });\n\nfunction initializeEventListeners() {\n    const uploadArea = document.getElementById('uploadArea');\n    const fileInput = document.getElementById('fileInput');\n    uploadArea.addEventListener('click', function(e) { e.preventDefault(); e.stopPropagation(); triggerFileInput(); });\n    ['dragenter','dragover','dragleave','drop'].forEach(ev=>{ uploadArea.addEventListener(ev, preventDefaults, false); document.body.addEventListener(ev, preventDefaults, false); });\n    ['dragenter','dragover'].forEach(ev=>uploadArea.addEventListener(ev, highlight, false));\n    ['dragleave','drop'].forEach(ev=>uploadArea.addEventListener(ev, unhighlight, false));\n    uploadArea.addEventListener('drop', handleDrop, false);\n    fileInput.addEventListener('change', function(e){ handleFiles(e.target.files); });\n}\n\nfunction triggerFileInput() {\n    const fileInput = document.getElementById('fileInput'); fileInput.click();\n}\n\nfunction preventDefaults(e){e.preventDefault();e.stopPropagation();}\nfunction highlight(e){document.getElementById('uploadArea').classList.add('dragover');}\nfunction unhighlight(e){document.getElementById('uploadArea').classList.remove('dragover');}\nfunction handleDrop(e){ const dt = e.dataTransfer; handleFiles(dt.files);}\n\nfunction showNotification(msg, type='info'){\n    const exs = document.querySelectorAll('.notification'); exs.forEach(n=>{ if(document.body.contains(n)){document.body.removeChild(n);} });\n    const n = document.createElement('div'); n.className = `notification ${type}`; n.textContent = msg; document.body.appendChild(n);\n    setTimeout(()=>n.classList.add('show'),100);\n    setTimeout(()=>{ n.classList.remove('show'); setTimeout(()=>{ if(document.body.contains(n)){document.body.removeChild(n);} },300); },3000);\n}\n\nfunction handleFiles(files) {\n    if(!files||files.length===0){showNotification('Nenhum arquivo selecionado','error');return;}\n    const arr=[...files]; let added=0;\n    arr.forEach(f=>{\n        if(f.type==='application/pdf'){\n            if(!selectedFiles.find(sf=>sf.name===f.name&&sf.size===f.size)){\n                selectedFiles.push(f); added++;\n            }\n        } else showNotification(`${f.name} não é um PDF válido`, 'error');\n    });\n    if(added>0){showNotification(`${added} arquivo(s) adicionado(s)`,'success'); updateFileList();}\n    else if(arr.some(f=>f.type==='application/pdf')) showNotification('Todos os PDFs já foram adicionados','info');\n}\n\nfunction updateFileList(){\n    const fileList = document.getElementById('fileList');\n    const fileItems = document.getElementById('fileItems');\n    const processBtn = document.getElementById('processBtn');\n    if(selectedFiles.length===0){fileList.style.display='none';processBtn.disabled=true;return;}\n    fileList.style.display='block'; fileItems.innerHTML='';\n    selectedFiles.forEach((file,index)=>{\n        const el=document.createElement('div');\n        el.className='file-item';\n        el.innerHTML=`<div class=\"file-info\"><div class=\"file-icon\">📄</div><div class=\"file-details\"><h4>${file.name}</h4><div class=\"file-size\">${formatFileSize(file.size)}</div></div></div><button class=\"remove-btn\" onclick=\"removeFile(${index})\">×</button>`;\n        fileItems.appendChild(el);\n    });\n    processBtn.disabled=false;\n}\n\nfunction removeFile(index){ const fileName=selectedFiles[index].name; selectedFiles.splice(index,1); updateFileList(); showNotification(`${fileName} removido`,'info'); }\n\nfunction formatFileSize(bytes){if(bytes===0)return'0 Bytes';const k=1024,sizes=['Bytes','KB','MB','GB'],i=Math.floor(Math.log(bytes)/Math.log(k));return parseFloat((bytes/Math.pow(k,i)).toFixed(2))+' '+sizes[i];}\n\nfunction fileToBase64(file){return new Promise((resolve,reject)=>{const r=new FileReader();r.readAsDataURL(file);r.onload=()=>resolve(r.result.split(',')[1]);r.onerror=e=>reject(e);});}\n\nasync function processFiles(){\n    if(selectedFiles.length===0){showNotification('Selecione pelo menos um PDF','error');return;}\n    \n    document.getElementById('uploadSection').style.display='none';\n    document.getElementById('progressSection').style.display='block';\n    document.getElementById('resultsSection').style.display='none';\n    document.getElementById('errorSection').style.display='none';\n    \n    const progressFill=document.getElementById('progressFill');\n    const progressText=document.getElementById('progressText');\n    const statusText=document.getElementById('statusText');\n    \n    try{\n        const uploadedFiles=[];\n        for(let i=0;i<selectedFiles.length;i++){\n            const file=selectedFiles[i],progress=((i+1)/selectedFiles.length)*30;\n            progressFill.style.width=progress+'%';\n            progressText.textContent=`Preparando ${file.name} (${i+1}/${selectedFiles.length})`;\n            const base64=await fileToBase64(file);\n            uploadedFiles.push({name:file.name,size:file.size,type:file.type,content:base64,uploadTime:new Date().toISOString()});\n            await new Promise(r=>setTimeout(r,120));\n        }\n        \n        const processId='proc_'+Date.now()+'_'+Math.random().toString(36).substr(2,9);\n        progressText.textContent='Enviando para IA...'; progressFill.style.width='45%';\n        statusText.textContent='Conectando com IA...';\n        \n        const payload={\n            processId, files: uploadedFiles, configuration: {\n                extractionType: 'structured',\n                fieldsToExtract: ['tombo_novo', 'tombo_antigo', 'instituicao', 'descricao_bem', 'local_fisico'],\n                customPrompt: `Analise cada página dos PDFs e extraia TODOS os dados de inventário de bens patrimoniais encontrados. \n                Para cada bem, identifique:\n                - Tombo Novo: número de tombamento atual\n                - Tombo Antigo: número de tombamento anterior (se houver)\n                - Instituição: UTFPR, CEFET, ETFPR ou similar\n                - Descrição do Bem: descrição completa do item\n                - Local Físico: localização, sala, código do local\n                Retorne os dados em formato JSON estruturado, um objeto para cada bem encontrado.\n                Seja minucioso e extraia TODOS os bens listados em cada página.`,\n                outputFormat: 'json',\n                useAdvancedAI: true\n            },\n            totalFiles: selectedFiles.length,\n            timestamp: new Date().toISOString(),\n            source: 'utfpr_pdf_processor'\n        };\n        \n        let currentProgress=45;\n        const progressInterval=setInterval(()=>{ if(currentProgress<92){currentProgress+=Math.random()*6;progressFill.style.width=Math.min(currentProgress,92)+'%';}},1000);\n        \n        console.log('Enviando payload:', payload);\n        \n        const response=await fetch(WEBHOOK_URL,{method:'POST',headers:{'Content-Type':'application/json','Accept':'application/json'},body:JSON.stringify(payload)});\n        \n        clearInterval(progressInterval);\n        \n        if(response.ok){\n            const responseData=await response.json();\n            console.log('Resposta recebida:', responseData);\n            \n            progressFill.style.width='100%';\n            progressText.textContent='Processamento concluído!';\n            statusText.textContent='Dados extraídos com sucesso!';\n            \n            await new Promise(r=>setTimeout(r,800));\n            showResults(responseData);\n        } else {\n            const errorText=await response.text();\n            console.error('Erro na resposta:', response.status, errorText);\n            throw new Error(`Erro do servidor: ${response.status} - ${errorText}`);\n        }\n    }catch(error){\n        console.error('Erro no processamento:', error);\n        showError(error.message);\n        showNotification('Erro no processamento','error');\n    }\n}\n\nfunction showResults(data){\n    document.getElementById('progressSection').style.display='none';\n    document.getElementById('resultsSection').style.display='block';\n    const resultsContainer=document.getElementById('resultsContainer');\n    const resultsStats=document.getElementById('resultsStats');\n    extractedData = [];\n    // Processar diferentes tipos de resposta\n    if (Array.isArray(data)) {\n        extractedData = data;\n    } else if (data && typeof data === 'object') {\n        if (data.output) {\n            if (typeof data.output === 'string') {\n                try { extractedData = JSON.parse(data.output); }\n                catch (e) { extractedData = []; }\n            } else if (Array.isArray(data.output)) {\n                extractedData = data.output;\n            } else if (typeof data.output === 'object') {\n                extractedData = [data.output];\n            }\n        } else if (data.data && Array.isArray(data.data)) {\n            extractedData = data.data;\n        } else if (data.results && Array.isArray(data.results)) {\n            extractedData = data.results;\n        } else {\n            const hasExpectedFields = Object.keys(data).some(key => \n                key.toLowerCase().includes('tombo') || \n                key.toLowerCase().includes('instituicao') ||\n                key.toLowerCase().includes('descricao')\n            );\n            if (hasExpectedFields) {\n                extractedData = [data];\n            } else {\n                for (const [key, value] of Object.entries(data)) {\n                    if (Array.isArray(value) && value.length > 0) {\n                        extractedData = value;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    if (!extractedData || extractedData.length === 0) {\n        resultsContainer.innerHTML = `\n            <div class=\"debug-section\">\n                <h4>Debug - Resposta recebida:</h4>\n                <pre>${JSON.stringify(data, null, 2)}</pre>\n            </div>\n            <p style=\"text-align: center; color: #666; margin: 20px 0;\">\n                Nenhum dado estruturado foi extraído. Verifique o formato da resposta acima.\n            </p>\n        `;\n        resultsStats.innerHTML = `\n            <div class=\"stat-card\"><div class=\"stat-number\">${selectedFiles.length}</div><div class=\"stat-label\">Arquivos</div></div>\n            <div class=\"stat-card\"><div class=\"stat-number\">0</div><div class=\"stat-label\">Itens Extraídos</div></div>\n            <div class=\"stat-card\"><div class=\"stat-number\">0</div><div class=\"stat-label\">Instituições</div></div>\n        `;\n    } else {\n        displayStructuredData();\n        const totalItems = extractedData.length;\n        const uniqueInstitutions = [...new Set(extractedData.map(item => {\n            return item.instituicao || item.Instituição || item.INSTITUICAO || item.institution || '';\n        }).filter(Boolean))];\n        resultsStats.innerHTML = `\n            <div class=\"stat-card\"><div class=\"stat-number\">${selectedFiles.length}</div><div class=\"stat-label\">Arquivos</div></div>\n            <div class=\"stat-card\"><div class=\"stat-number\">${totalItems}</div><div class=\"stat-label\">Itens Extraídos</div></div>\n            <div class=\"stat-card\"><div class=\"stat-number\">${uniqueInstitutions.length}</div><div class=\"stat-label\">Instituições</div></div>\n        `;\n    }\n}\n\n/** AJUSTE AQUI: função fiel aos campos do seu JSON **/\nfunction displayStructuredData(){\n    const resultsContainer = document.getElementById('resultsContainer');\n    if (extractedData.length > 0) {\n        let tableHTML = `\n            <table class=\"results-table\">\n                <thead>\n                    <tr>\n                        <th>Tombo Novo</th>\n                        <th>Tombo Antigo</th>\n                        <th>Instituicao</th>\n                        <th>Descricao do Bem</th>\n                        <th>Local Fisico</th>\n                    </tr>\n                </thead>\n                <tbody>\n        `;\n        extractedData.forEach(item => {\n            // Use apenas os campos exatos do JSON retornado pelo Code1!\n            const tomboNovo = item[\"Tombo Novo\"] || '-';\n            const tomboAntigo = item[\"Tombo Antigo\"] || '-';\n            const instituicao = item[\"Instituição\"] || '-';\n            const descricao = item[\"Descricao do Bem\"] || item[\"Descrição do Bem\"] || '-'; // cobre ambos os casos\n            const local = item[\"Local Físico\"] || '-';\n\n            tableHTML += `\n                <tr>\n                    <td>${tomboNovo}</td>\n                    <td>${tomboAntigo}</td>\n                    <td>${instituicao}</td>\n                    <td>${descricao}</td>\n                    <td>${local}</td>\n                </tr>\n            `;\n        });\n        tableHTML += '</tbody></table>';\n        resultsContainer.innerHTML = tableHTML;\n    } else {\n        resultsContainer.innerHTML = '<p style=\"text-align: center; color: #666;\">Nenhum dado foi extraído dos PDFs.</p>';\n    }\n}\n\nfunction showError(msg){\n    document.getElementById('progressSection').style.display='none';\n    document.getElementById('errorSection').style.display='block';\n    document.getElementById('errorMessage').textContent=msg;\n}\n\nfunction downloadResults(){\n    if(!extractedData||extractedData.length===0){\n        showNotification('Nenhum dado para download','error');\n        return;\n    }\n    const headers = [\n        'Tombo Novo',\n        'Tombo Antigo',\n        'Instituicao',\n        'Descricao do Bem',\n        'Local Fisico'\n    ];\n    const csvContent = [\n        headers.join(';'),\n        ...extractedData.map(item => {\n            const row = [\n                item[\"Tombo Novo\"] || '',\n                item[\"Tombo Antigo\"] || '',\n                item[\"Instituição\"] || '',\n                item[\"Descricao do Bem\"] || item[\"Descrição do Bem\"] || '',\n                item[\"Local Físico\"] || ''\n            ];\n            return row.map(field => {\n                let valor = String(field).replace(/\"/g, '\"\"');\n                if (valor.includes(';') || valor.includes('\\n')) {\n                    return `\"${valor}\"`;\n                }\n                return valor;\n            }).join(';');\n        })\n    ].join('\\r\\n');\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `dados_utfpr_${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    showNotification('Download iniciado!', 'success');\n}\n\nfunction resetInterface() {\n    selectedFiles = [];\n    extractedData = [];\n    document.getElementById('uploadSection').style.display = 'block';\n    document.getElementById('progressSection').style.display = 'none';\n    document.getElementById('resultsSection').style.display = 'none';\n    document.getElementById('errorSection').style.display = 'none';\n    document.getElementById('fileList').style.display = 'none';\n    document.getElementById('fileItems').innerHTML = '';\n    document.getElementById('processBtn').disabled = true;\n    document.getElementById('progressFill').style.width = '0%';\n    const fileInput = document.getElementById('fileInput');\n    fileInput.value = '';\n    showNotification('Interface resetada', 'info');\n}\n</script>\n</body>\n</html>\n"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        -180,
        -140
      ],
      "id": "61ddd539-34f2-479a-a545-8f63bbe61018",
      "name": "v0 - "
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "v0 - ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "v0 - ": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3d7bc90f-023e-44a3-bec0-5c321c804893",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "74b8140af2ec36d65b139b1db371907da1456c45bf8acd620535b542e3e80dbc"
  },
  "id": "pMhNWhvUVRqs27YP",
  "tags": []
}